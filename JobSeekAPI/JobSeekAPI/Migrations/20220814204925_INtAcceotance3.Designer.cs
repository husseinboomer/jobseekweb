// <auto-generated />
using System;
using JobSeekAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobSeekAPI.Migrations
{
    [DbContext(typeof(db_a8b602_jobseekContext))]
    [Migration("20220814204925_INtAcceotance3")]
    partial class INtAcceotance3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("JobSeekAPI.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("LogInDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("LogOutDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Paswword")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "Email_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "Id" }, "Id_UNIQUE")
                        .IsUnique();

                    b.ToTable("admin", (string)null);
                });

            modelBuilder.Entity("JobSeekAPI.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Address" }, "Address_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "CityId" }, "Fkey_City_Branch_idx");

                    b.HasIndex(new[] { "CompanyId" }, "Fkey_Company_Branch_idx");

                    b.HasIndex(new[] { "Id" }, "Id_UNIQUE1")
                        .IsUnique();

                    b.ToTable("branch", (string)null);
                });

            modelBuilder.Entity("JobSeekAPI.Models.BranchSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BranchId" }, "Fkey_Branch_idx");

                    b.HasIndex(new[] { "SectionId" }, "Fkey_Section_idx");

                    b.HasIndex(new[] { "Id" }, "Id_UNIQUE2")
                        .IsUnique();

                    b.ToTable("branch_section", (string)null);
                });

            modelBuilder.Entity("JobSeekAPI.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(350)
                        .HasColumnType("varchar(350)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "Id_UNIQUE3")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "Name_UNIQUE")
                        .IsUnique();

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("JobSeekAPI.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "Id_UNIQUE4")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "Name_UNIQUE1")
                        .IsUnique();

                    b.ToTable("certification", (string)null);
                });

            modelBuilder.Entity("JobSeekAPI.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "Id_UNIQUE5")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "Name_UNIQUE2")
                        .IsUnique();

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("JobSeekAPI.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int?>("PassCode")
                        .HasColumnType("int");

                    b.Property<string>("WebSite")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "Email_UNIQUE1")
                        .IsUnique();

                    b.HasIndex(new[] { "Id" }, "Id_UNIQUE6")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "Name_UNIQUE3")
                        .IsUnique();

                    b.HasIndex(new[] { "PassCode" }, "PassCode_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "WebSite" }, "WebSite_UNIQUE")
                        .IsUnique();

                    b.ToTable("company", (string)null);
                });

            modelBuilder.Entity("JobSeekAPI.Models.Documnet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ExtraInfo")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("IsCv")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<byte[]>("IsImage")
                        .HasColumnType("longblob");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "Id_UNIQUE7")
                        .IsUnique();

                    b.ToTable("documnet", (string)null);
                });

            modelBuilder.Entity("JobSeekAPI.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "Id_UNIQUE8")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "Name_UNIQUE4")
                        .IsUnique();

                    b.ToTable("education", (string)null);
                });

            modelBuilder.Entity("JobSeekAPI.Models.Employeer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<ulong?>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "Email_UNIQUE2")
                        .IsUnique();

                    b.HasIndex(new[] { "CompanyId" }, "Fkey_Company_idx");

                    b.HasIndex(new[] { "Id" }, "Id_UNIQUE9")
                        .IsUnique();

                    b.ToTable("employeer", (string)null);
                });

            modelBuilder.Entity("JobSeekAPI.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AgeRequired")
                        .HasColumnType("int");

                    b.Property<int?>("BranchSectionId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CertificationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(350)
                        .HasColumnType("varchar(350)");

                    b.Property<int?>("EducationId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeerId")
                        .HasColumnType("int");

                    b.Property<string>("GenderRequired")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<string>("JobType")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PersonsNumRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'");

                    b.Property<decimal>("Salary")
                        .HasPrecision(10)
                        .HasColumnType("decimal(10)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<int?>("YearsOfExpieriance")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BranchSectionId" }, "Fkey_BranchSection_job_idx");

                    b.HasIndex(new[] { "CategoryId" }, "Fkey_Category_Job_idx");

                    b.HasIndex(new[] { "CertificationId" }, "Fkey_Certification_Job_idx");

                    b.HasIndex(new[] { "EducationId" }, "Fkey_Education_Job_idx");

                    b.HasIndex(new[] { "EmployeerId" }, "Fkey_Employeer_Job_idx");

                    b.HasIndex(new[] { "Id" }, "Id_UNIQUE10")
                        .IsUnique();

                    b.ToTable("job", (string)null);
                });

            modelBuilder.Entity("JobSeekAPI.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Acceptance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<double?>("RateGrade")
                        .HasColumnType("double");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DocumentId" }, "Fkey_Document_Order_idx");

                    b.HasIndex(new[] { "JobId" }, "Fkey_Job_Order_idx");

                    b.HasIndex(new[] { "UserId" }, "Fkey_User_Order_idx");

                    b.HasIndex(new[] { "Id" }, "Id_UNIQUE11")
                        .IsUnique();

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("JobSeekAPI.Models.Savedjob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "Id_UNIQUE12")
                        .IsUnique();

                    b.ToTable("savedjob", (string)null);
                });

            modelBuilder.Entity("JobSeekAPI.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "Id_UNIQUE13")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "Name_UNIQUE5")
                        .IsUnique();

                    b.ToTable("section", (string)null);

                    b.HasComment("				");
                });

            modelBuilder.Entity("JobSeekAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("BirthDay")
                        .HasColumnType("date");

                    b.Property<int?>("CertificationId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("EducationId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Gender")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)");

                    b.Property<int?>("YearsOfExpieriance")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "Email_UNIQUE3")
                        .IsUnique();

                    b.HasIndex(new[] { "CertificationId" }, "Fkey_Certification_User_idx");

                    b.HasIndex(new[] { "CityId" }, "Fkey_City_User_idx");

                    b.HasIndex(new[] { "EducationId" }, "Fkey_Education_User_idx");

                    b.HasIndex(new[] { "Id" }, "Id_UNIQUE14")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("JobSeekAPI.Models.Branch", b =>
                {
                    b.HasOne("JobSeekAPI.Models.City", "City")
                        .WithMany("Branches")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fkey_City_Branch");

                    b.HasOne("JobSeekAPI.Models.Company", "Company")
                        .WithMany("Branches")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fkey_Company_Branch");

                    b.Navigation("City");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JobSeekAPI.Models.BranchSection", b =>
                {
                    b.HasOne("JobSeekAPI.Models.Branch", "Branch")
                        .WithMany("BranchSections")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fkey_Branch");

                    b.HasOne("JobSeekAPI.Models.Section", "Section")
                        .WithMany("BranchSections")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fkey_Section");

                    b.Navigation("Branch");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("JobSeekAPI.Models.Employeer", b =>
                {
                    b.HasOne("JobSeekAPI.Models.Company", "Company")
                        .WithMany("Employeers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fkey_Company");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JobSeekAPI.Models.Job", b =>
                {
                    b.HasOne("JobSeekAPI.Models.BranchSection", "BranchSection")
                        .WithMany("Jobs")
                        .HasForeignKey("BranchSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Fkey_BranchSection_job");

                    b.HasOne("JobSeekAPI.Models.Category", "Category")
                        .WithMany("Jobs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Fkey_Category_Job");

                    b.HasOne("JobSeekAPI.Models.Certification", "Certification")
                        .WithMany("Jobs")
                        .HasForeignKey("CertificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Fkey_Certification_Job");

                    b.HasOne("JobSeekAPI.Models.Education", "Education")
                        .WithMany("Jobs")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Fkey_Education_Job");

                    b.HasOne("JobSeekAPI.Models.Employeer", "Employeer")
                        .WithMany("Jobs")
                        .HasForeignKey("EmployeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Fkey_Employeer_Job");

                    b.Navigation("BranchSection");

                    b.Navigation("Category");

                    b.Navigation("Certification");

                    b.Navigation("Education");

                    b.Navigation("Employeer");
                });

            modelBuilder.Entity("JobSeekAPI.Models.Order", b =>
                {
                    b.HasOne("JobSeekAPI.Models.Documnet", "Document")
                        .WithMany("Orders")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Fkey_Document_Order");

                    b.HasOne("JobSeekAPI.Models.Job", "Job")
                        .WithMany("Orders")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fkey_Job_Order");

                    b.HasOne("JobSeekAPI.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fkey_User_Order");

                    b.Navigation("Document");

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobSeekAPI.Models.User", b =>
                {
                    b.HasOne("JobSeekAPI.Models.Certification", "Certification")
                        .WithMany("Users")
                        .HasForeignKey("CertificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Fkey_Certification_User");

                    b.HasOne("JobSeekAPI.Models.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Fkey_City_User");

                    b.HasOne("JobSeekAPI.Models.Education", "Education")
                        .WithMany("Users")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Fkey_Education_User");

                    b.Navigation("Certification");

                    b.Navigation("City");

                    b.Navigation("Education");
                });

            modelBuilder.Entity("JobSeekAPI.Models.Branch", b =>
                {
                    b.Navigation("BranchSections");
                });

            modelBuilder.Entity("JobSeekAPI.Models.BranchSection", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobSeekAPI.Models.Category", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobSeekAPI.Models.Certification", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("JobSeekAPI.Models.City", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("JobSeekAPI.Models.Company", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Employeers");
                });

            modelBuilder.Entity("JobSeekAPI.Models.Documnet", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("JobSeekAPI.Models.Education", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("JobSeekAPI.Models.Employeer", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobSeekAPI.Models.Job", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("JobSeekAPI.Models.Section", b =>
                {
                    b.Navigation("BranchSections");
                });

            modelBuilder.Entity("JobSeekAPI.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
